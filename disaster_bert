{"metadata":{"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":17777,"databundleVersionId":869809,"sourceType":"competition"}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"papermill":{"default_parameters":{},"duration":4.620973,"end_time":"2024-07-16T18:37:45.361288","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-07-16T18:37:40.740315","version":"2.5.0"}},"nbformat_minor":5,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport keras_core as keras\nimport keras_nlp\nfrom sklearn.metrics import ConfusionMatrixDisplay, confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nprint(\"TensorFlow version:\", tf.__version__)\nprint(\"KerasNLP version:\", keras_nlp.__version__)","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","papermill":{"duration":0.97955,"end_time":"2024-07-16T18:37:44.837219","exception":false,"start_time":"2024-07-16T18:37:43.857669","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-23T08:47:24.420039Z","iopub.execute_input":"2024-07-23T08:47:24.420412Z","iopub.status.idle":"2024-07-23T08:47:39.804635Z","shell.execute_reply.started":"2024-07-23T08:47:24.420384Z","shell.execute_reply":"2024-07-23T08:47:39.801197Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"2024-07-23 08:47:27.434865: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-07-23 08:47:27.434999: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-07-23 08:47:27.573246: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","Cell \u001b[0;32mIn[1], line 4\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpd\u001b[39;00m \u001b[38;5;66;03m# data processing, CSV file I/O (e.g. pd.read_csv)\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mtf\u001b[39;00m\n\u001b[0;32m----> 4\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mkeras_core\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mkeras\u001b[39;00m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mkeras_nlp\u001b[39;00m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmetrics\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m ConfusionMatrixDisplay, confusion_matrix\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'keras_core'"],"ename":"ModuleNotFoundError","evalue":"No module named 'keras_core'","output_type":"error"}]},{"cell_type":"code","source":"!pip install keras","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:48:53.220065Z","iopub.execute_input":"2024-07-23T08:48:53.220812Z","iopub.status.idle":"2024-07-23T08:49:08.727520Z","shell.execute_reply.started":"2024-07-23T08:48:53.220776Z","shell.execute_reply":"2024-07-23T08:49:08.726405Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  pid, fd = os.forkpty()\n","output_type":"stream"},{"name":"stdout","text":"Requirement already satisfied: keras in /opt/conda/lib/python3.10/site-packages (3.4.1)\nRequirement already satisfied: absl-py in /opt/conda/lib/python3.10/site-packages (from keras) (1.4.0)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from keras) (1.26.4)\nRequirement already satisfied: rich in /opt/conda/lib/python3.10/site-packages (from keras) (13.7.0)\nRequirement already satisfied: namex in /opt/conda/lib/python3.10/site-packages (from keras) (0.0.8)\nRequirement already satisfied: h5py in /opt/conda/lib/python3.10/site-packages (from keras) (3.10.0)\nRequirement already satisfied: optree in /opt/conda/lib/python3.10/site-packages (from keras) (0.12.1)\nRequirement already satisfied: ml-dtypes in /opt/conda/lib/python3.10/site-packages (from keras) (0.2.0)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from keras) (21.3)\nRequirement already satisfied: typing-extensions>=4.5.0 in /opt/conda/lib/python3.10/site-packages (from optree->keras) (4.9.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->keras) (3.1.1)\nRequirement already satisfied: markdown-it-py>=2.2.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras) (3.0.0)\nRequirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras) (2.17.2)\nRequirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.10/site-packages (from markdown-it-py>=2.2.0->rich->keras) (0.1.2)\n","output_type":"stream"}]},{"cell_type":"code","source":"df_train = pd.read_csv(\"Data/train.csv\")\ndf_test = pd.read_csv(\"Data/test.csv\")\n\nprint('Training Set Shape = {}'.format(df_train.shape))\nprint('Training Set Memory Usage = {:.2f} MB'.format(df_train.memory_usage().sum() / 1024**2))\nprint('Test Set Shape = {}'.format(df_test.shape))\nprint('Test Set Memory Usage = {:.2f} MB'.format(df_test.memory_usage().sum() / 1024**2))","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:47:39.806288Z","iopub.status.idle":"2024-07-23T08:47:39.806962Z","shell.execute_reply.started":"2024-07-23T08:47:39.806622Z","shell.execute_reply":"2024-07-23T08:47:39.806646Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_train.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:47:39.812547Z","iopub.status.idle":"2024-07-23T08:47:39.813389Z","shell.execute_reply.started":"2024-07-23T08:47:39.813093Z","shell.execute_reply":"2024-07-23T08:47:39.813118Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:47:39.814502Z","iopub.status.idle":"2024-07-23T08:47:39.815342Z","shell.execute_reply.started":"2024-07-23T08:47:39.815050Z","shell.execute_reply":"2024-07-23T08:47:39.815074Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_train[\"length\"] = df_train[\"text\"].apply(lambda x : len(x))\ndf_test[\"length\"] = df_test[\"text\"].apply(lambda x : len(x))\n\nprint(\"Train Length Stat\")\nprint(df_train[\"length\"].describe())\nprint()\n\nprint(\"Test Length Stat\")\nprint(df_test[\"length\"].describe())","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:47:39.816510Z","iopub.status.idle":"2024-07-23T08:47:39.817036Z","shell.execute_reply.started":"2024-07-23T08:47:39.816772Z","shell.execute_reply":"2024-07-23T08:47:39.816794Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"BATCH_SIZE = 32\nNUM_TRAINING_EXAMPLES = df_train.shape[0]\nTRAIN_SPLIT = 0.8\nVAL_SPLIT = 0.2\nSTEPS_PER_EPOCH = int(NUM_TRAINING_EXAMPLES)*TRAIN_SPLIT // BATCH_SIZE\n\nEPOCHS = 10\nAUTO = tf.data.experimental.AUTOTUNE","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:47:39.818413Z","iopub.status.idle":"2024-07-23T08:47:39.818956Z","shell.execute_reply.started":"2024-07-23T08:47:39.818661Z","shell.execute_reply":"2024-07-23T08:47:39.818683Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nX = df_train[\"text\"]\ny = df_train[\"target\"]\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=VAL_SPLIT, random_state=42)\n\nX_test = df_test[\"text\"]","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:47:39.820143Z","iopub.status.idle":"2024-07-23T08:47:39.820651Z","shell.execute_reply.started":"2024-07-23T08:47:39.820401Z","shell.execute_reply":"2024-07-23T08:47:39.820422Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load a DistilBERT model.\npreset= \"distil_bert_base_en_uncased\"\n\n# Use a shorter sequence length.\npreprocessor = keras_nlp.models.DistilBertPreprocessor.from_preset(preset,\n                                                                   sequence_length=160,\n                                                                   name=\"preprocessor_4_tweets\"\n                                                                  )\n\n# Pretrained classifier.\nclassifier = keras_nlp.models.DistilBertClassifier.from_preset(preset,\n                                                               preprocessor = preprocessor, \n                                                               num_classes=2)\n\nclassifier.summary()","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:47:39.822615Z","iopub.status.idle":"2024-07-23T08:47:39.823169Z","shell.execute_reply.started":"2024-07-23T08:47:39.822904Z","shell.execute_reply":"2024-07-23T08:47:39.822927Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import keras\nfrom keras.optimizers import Adam\n\n# Compile\nclassifier.compile(\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),  # 'binary_crossentropy',\n    optimizer=Adam(1e-5),  # Ensure correct instantiation\n    metrics=[\"accuracy\"]\n)\n\n# Fit\nhistory = classifier.fit(\n    x=X_train,\n    y=y_train,\n    batch_size=BATCH_SIZE,\n    epochs=EPOCHS,\n    validation_data=(X_val, y_val)\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:47:39.824474Z","iopub.status.idle":"2024-07-23T08:47:39.825305Z","shell.execute_reply.started":"2024-07-23T08:47:39.824770Z","shell.execute_reply":"2024-07-23T08:47:39.824797Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def displayConfusionMatrix(y_true, y_pred, dataset):\n    disp = ConfusionMatrixDisplay.from_predictions(\n        y_true,\n        np.argmax(y_pred, axis=1),\n        display_labels=[\"Not Disaster\",\"Disaster\"],\n        cmap=plt.cm.Blues\n    )\n\n    tn, fp, fn, tp = confusion_matrix(y_true, np.argmax(y_pred, axis=1)).ravel()\n    f1_score = tp / (tp+((fn+fp)/2))\n\n    disp.ax_.set_title(\"Confusion Matrix on \" + dataset + \" Dataset -- F1 Score: \" + str(f1_score.round(2)))","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:47:39.826684Z","iopub.status.idle":"2024-07-23T08:47:39.827305Z","shell.execute_reply.started":"2024-07-23T08:47:39.827000Z","shell.execute_reply":"2024-07-23T08:47:39.827032Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred_train = classifier.predict(X_train)\n\ndisplayConfusionMatrix(y_train, y_pred_train, \"Training\")","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:47:39.828602Z","iopub.status.idle":"2024-07-23T08:47:39.829217Z","shell.execute_reply.started":"2024-07-23T08:47:39.828913Z","shell.execute_reply":"2024-07-23T08:47:39.828936Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred_val = classifier.predict(X_val)\n\ndisplayConfusionMatrix(y_val, y_pred_val, \"Validation\")","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:47:39.830480Z","iopub.status.idle":"2024-07-23T08:47:39.831047Z","shell.execute_reply.started":"2024-07-23T08:47:39.830767Z","shell.execute_reply":"2024-07-23T08:47:39.830790Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# get predictions\ny_pred = classifier.predict(X_test)\n\n# create submission file\nsubmission = pd.read_csv(\"Data/sample_submission.csv\")\nsubmission[\"target\"] = np.argmax(y_pred, axis=1)\nsubmission.to_csv(\"submission.csv\", index=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:47:39.832463Z","iopub.status.idle":"2024-07-23T08:47:39.833028Z","shell.execute_reply.started":"2024-07-23T08:47:39.832752Z","shell.execute_reply":"2024-07-23T08:47:39.832775Z"},"trusted":true},"execution_count":null,"outputs":[]}]}