{"metadata":{"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceType":"competition","sourceId":17777,"databundleVersionId":869809},{"sourceType":"modelInstanceVersion","sourceId":6068,"databundleVersionId":7429247,"modelInstanceId":4689}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"papermill":{"default_parameters":{},"duration":4.620973,"end_time":"2024-07-16T18:37:45.361288","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-07-16T18:37:40.740315","version":"2.5.0"}},"nbformat_minor":5,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport keras_core as keras\nimport keras_nlp\nfrom sklearn.metrics import ConfusionMatrixDisplay, confusion_matrix\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nprint(\"TensorFlow version:\", tf.__version__)\nprint(\"KerasNLP version:\", keras_nlp.__version__)","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","papermill":{"duration":0.97955,"end_time":"2024-07-16T18:37:44.837219","exception":false,"start_time":"2024-07-16T18:37:43.857669","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-23T08:50:50.291192Z","iopub.execute_input":"2024-07-23T08:50:50.291647Z","iopub.status.idle":"2024-07-23T08:50:50.299636Z","shell.execute_reply.started":"2024-07-23T08:50:50.291616Z","shell.execute_reply":"2024-07-23T08:50:50.298405Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"TensorFlow version: 2.15.0\nKerasNLP version: 0.14.0\n","output_type":"stream"}]},{"cell_type":"code","source":"df_train = pd.read_csv(\"/kaggle/input/nlp-getting-started/train.csv\")\ndf_test = pd.read_csv(\"/kaggle/input/nlp-getting-started/train.csv\")\n\nprint('Training Set Shape = {}'.format(df_train.shape))\nprint('Training Set Memory Usage = {:.2f} MB'.format(df_train.memory_usage().sum() / 1024**2))\nprint('Test Set Shape = {}'.format(df_test.shape))\nprint('Test Set Memory Usage = {:.2f} MB'.format(df_test.memory_usage().sum() / 1024**2))","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:50:50.301916Z","iopub.execute_input":"2024-07-23T08:50:50.302224Z","iopub.status.idle":"2024-07-23T08:50:50.435501Z","shell.execute_reply.started":"2024-07-23T08:50:50.302196Z","shell.execute_reply":"2024-07-23T08:50:50.434380Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Training Set Shape = (7613, 5)\nTraining Set Memory Usage = 0.29 MB\nTest Set Shape = (7613, 5)\nTest Set Memory Usage = 0.29 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df_train.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:50:50.436985Z","iopub.execute_input":"2024-07-23T08:50:50.437410Z","iopub.status.idle":"2024-07-23T08:50:50.455933Z","shell.execute_reply.started":"2024-07-23T08:50:50.437374Z","shell.execute_reply":"2024-07-23T08:50:50.454911Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"   id keyword location                                               text  \\\n0   1     NaN      NaN  Our Deeds are the Reason of this #earthquake M...   \n1   4     NaN      NaN             Forest fire near La Ronge Sask. Canada   \n2   5     NaN      NaN  All residents asked to 'shelter in place' are ...   \n3   6     NaN      NaN  13,000 people receive #wildfires evacuation or...   \n4   7     NaN      NaN  Just got sent this photo from Ruby #Alaska as ...   \n\n   target  \n0       1  \n1       1  \n2       1  \n3       1  \n4       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>keyword</th>\n      <th>location</th>\n      <th>text</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Our Deeds are the Reason of this #earthquake M...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Forest fire near La Ronge Sask. Canada</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>All residents asked to 'shelter in place' are ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>13,000 people receive #wildfires evacuation or...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Just got sent this photo from Ruby #Alaska as ...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:50:50.458809Z","iopub.execute_input":"2024-07-23T08:50:50.459138Z","iopub.status.idle":"2024-07-23T08:50:50.471717Z","shell.execute_reply.started":"2024-07-23T08:50:50.459111Z","shell.execute_reply":"2024-07-23T08:50:50.470552Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"   id keyword location                                               text  \\\n0   1     NaN      NaN  Our Deeds are the Reason of this #earthquake M...   \n1   4     NaN      NaN             Forest fire near La Ronge Sask. Canada   \n2   5     NaN      NaN  All residents asked to 'shelter in place' are ...   \n3   6     NaN      NaN  13,000 people receive #wildfires evacuation or...   \n4   7     NaN      NaN  Just got sent this photo from Ruby #Alaska as ...   \n\n   target  \n0       1  \n1       1  \n2       1  \n3       1  \n4       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>keyword</th>\n      <th>location</th>\n      <th>text</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Our Deeds are the Reason of this #earthquake M...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Forest fire near La Ronge Sask. Canada</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>All residents asked to 'shelter in place' are ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>13,000 people receive #wildfires evacuation or...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Just got sent this photo from Ruby #Alaska as ...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_train[\"length\"] = df_train[\"text\"].apply(lambda x : len(x))\ndf_test[\"length\"] = df_test[\"text\"].apply(lambda x : len(x))\n\nprint(\"Train Length Stat\")\nprint(df_train[\"length\"].describe())\nprint()\n\nprint(\"Test Length Stat\")\nprint(df_test[\"length\"].describe())","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:50:50.472848Z","iopub.execute_input":"2024-07-23T08:50:50.473152Z","iopub.status.idle":"2024-07-23T08:50:50.507545Z","shell.execute_reply.started":"2024-07-23T08:50:50.473126Z","shell.execute_reply":"2024-07-23T08:50:50.506439Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Train Length Stat\ncount    7613.000000\nmean      101.037436\nstd        33.781325\nmin         7.000000\n25%        78.000000\n50%       107.000000\n75%       133.000000\nmax       157.000000\nName: length, dtype: float64\n\nTest Length Stat\ncount    7613.000000\nmean      101.037436\nstd        33.781325\nmin         7.000000\n25%        78.000000\n50%       107.000000\n75%       133.000000\nmax       157.000000\nName: length, dtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"BATCH_SIZE = 32\nNUM_TRAINING_EXAMPLES = df_train.shape[0]\nTRAIN_SPLIT = 0.8\nVAL_SPLIT = 0.2\nSTEPS_PER_EPOCH = int(NUM_TRAINING_EXAMPLES)*TRAIN_SPLIT // BATCH_SIZE\n\nEPOCHS = 10\nAUTO = tf.data.experimental.AUTOTUNE","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:50:50.508930Z","iopub.execute_input":"2024-07-23T08:50:50.509276Z","iopub.status.idle":"2024-07-23T08:50:50.515450Z","shell.execute_reply.started":"2024-07-23T08:50:50.509248Z","shell.execute_reply":"2024-07-23T08:50:50.514273Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nX = df_train[\"text\"]\ny = df_train[\"target\"]\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=VAL_SPLIT, random_state=42)\n\nX_test = df_test[\"text\"]","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:50:50.516801Z","iopub.execute_input":"2024-07-23T08:50:50.517640Z","iopub.status.idle":"2024-07-23T08:50:50.545878Z","shell.execute_reply.started":"2024-07-23T08:50:50.517589Z","shell.execute_reply":"2024-07-23T08:50:50.544577Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# Load a DistilBERT model.\npreset= \"distil_bert_base_en_uncased\"\n\n# Use a shorter sequence length.\npreprocessor = keras_nlp.models.DistilBertPreprocessor.from_preset(preset,\n                                                                   sequence_length=160,\n                                                                   name=\"preprocessor_4_tweets\"\n                                                                  )\n\n# Pretrained classifier.\nclassifier = keras_nlp.models.DistilBertClassifier.from_preset(preset,\n                                                               preprocessor = preprocessor, \n                                                               num_classes=2)\n\nclassifier.summary()","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:50:50.547262Z","iopub.execute_input":"2024-07-23T08:50:50.547598Z","iopub.status.idle":"2024-07-23T08:51:03.355321Z","shell.execute_reply.started":"2024-07-23T08:50:50.547570Z","shell.execute_reply":"2024-07-23T08:51:03.354169Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"Attaching 'model.safetensors' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'model.safetensors.index.json' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'metadata.json' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'metadata.json' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'preprocessor.json' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'tokenizer.json' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'tokenizer.json' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'assets/tokenizer/vocabulary.txt' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'model.safetensors' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'model.safetensors.index.json' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'metadata.json' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'metadata.json' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'task.json' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'config.json' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'model.safetensors' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'model.safetensors.index.json' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'metadata.json' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'metadata.json' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'config.json' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'config.json' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\nAttaching 'model.weights.h5' from model 'keras/distil_bert/keras/distil_bert_base_en_uncased/2' to your Kaggle notebook...\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mPreprocessor: \"preprocessor_4_tweets\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Preprocessor: \"preprocessor_4_tweets\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mTokenizer (type)                                  \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m                                            Vocab #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ distil_bert_tokenizer (\u001b[38;5;33mDistilBertTokenizer\u001b[0m)        │                                              \u001b[38;5;34m30,522\u001b[0m │\n└────────────────────────────────────────────────────┴─────────────────────────────────────────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Tokenizer (type)                                   </span>┃<span style=\"font-weight: bold\">                                             Vocab # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ distil_bert_tokenizer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">DistilBertTokenizer</span>)        │                                              <span style=\"color: #00af00; text-decoration-color: #00af00\">30,522</span> │\n└────────────────────────────────────────────────────┴─────────────────────────────────────────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"distil_bert_classifier\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"distil_bert_classifier\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                 \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to              \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ padding_mask (\u001b[38;5;33mInputLayer\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ token_ids (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │ -                          │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ distil_bert_backbone          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m768\u001b[0m)         │      \u001b[38;5;34m66,362,880\u001b[0m │ padding_mask[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],        │\n│ (\u001b[38;5;33mDistilBertBackbone\u001b[0m)          │                           │                 │ token_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ get_item (\u001b[38;5;33mGetItem\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m768\u001b[0m)               │               \u001b[38;5;34m0\u001b[0m │ distil_bert_backbone[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ pooled_dense (\u001b[38;5;33mDense\u001b[0m)          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m768\u001b[0m)               │         \u001b[38;5;34m590,592\u001b[0m │ get_item[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]             │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ output_dropout (\u001b[38;5;33mDropout\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m768\u001b[0m)               │               \u001b[38;5;34m0\u001b[0m │ pooled_dense[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ logits (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │           \u001b[38;5;34m1,538\u001b[0m │ output_dropout[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]       │\n└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                  </span>┃<span style=\"font-weight: bold\"> Output Shape              </span>┃<span style=\"font-weight: bold\">         Param # </span>┃<span style=\"font-weight: bold\"> Connected to               </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ padding_mask (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ token_ids (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ distil_bert_backbone          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)         │      <span style=\"color: #00af00; text-decoration-color: #00af00\">66,362,880</span> │ padding_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],        │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">DistilBertBackbone</span>)          │                           │                 │ token_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ get_item (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GetItem</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)               │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ distil_bert_backbone[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ pooled_dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)               │         <span style=\"color: #00af00; text-decoration-color: #00af00\">590,592</span> │ get_item[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]             │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ output_dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)               │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ pooled_dense[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n├───────────────────────────────┼───────────────────────────┼─────────────────┼────────────────────────────┤\n│ logits (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">1,538</span> │ output_dropout[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]       │\n└───────────────────────────────┴───────────────────────────┴─────────────────┴────────────────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m66,955,010\u001b[0m (255.41 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">66,955,010</span> (255.41 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m66,955,010\u001b[0m (255.41 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">66,955,010</span> (255.41 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"import keras\nfrom keras.optimizers import Adam\n\n# Compile\nclassifier.compile(\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),  # 'binary_crossentropy',\n    optimizer=Adam(1e-5),  # Ensure correct instantiation\n    metrics=[\"accuracy\"]\n)\n\n# Fit\nhistory = classifier.fit(\n    x=X_train,\n    y=y_train,\n    batch_size=BATCH_SIZE,\n    epochs=EPOCHS,\n    validation_data=(X_val, y_val)\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-23T08:51:03.356902Z","iopub.execute_input":"2024-07-23T08:51:03.357338Z","iopub.status.idle":"2024-07-23T09:07:06.960617Z","shell.execute_reply.started":"2024-07-23T08:51:03.357300Z","shell.execute_reply":"2024-07-23T09:07:06.959753Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"Epoch 1/10\n","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1721724737.956793     150 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\nW0000 00:00:1721724738.009675     150 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m191/191\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 662ms/step - accuracy: 0.7148 - loss: 0.5712","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1721724863.958767     150 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\nW0000 00:00:1721724868.450763     150 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m191/191\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m212s\u001b[0m 728ms/step - accuracy: 0.7151 - loss: 0.5708 - val_accuracy: 0.8411 - val_loss: 0.3969\nEpoch 2/10\n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1721724876.681983     148 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m191/191\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 435ms/step - accuracy: 0.8431 - loss: 0.3812 - val_accuracy: 0.8457 - val_loss: 0.3865\nEpoch 3/10\n\u001b[1m191/191\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 435ms/step - accuracy: 0.8736 - loss: 0.3204 - val_accuracy: 0.8319 - val_loss: 0.4057\nEpoch 4/10\n\u001b[1m191/191\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 434ms/step - accuracy: 0.9006 - loss: 0.2724 - val_accuracy: 0.8326 - val_loss: 0.4306\nEpoch 5/10\n\u001b[1m191/191\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 435ms/step - accuracy: 0.9252 - loss: 0.2317 - val_accuracy: 0.8253 - val_loss: 0.4931\nEpoch 6/10\n\u001b[1m191/191\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 435ms/step - accuracy: 0.9296 - loss: 0.2017 - val_accuracy: 0.8313 - val_loss: 0.5010\nEpoch 7/10\n\u001b[1m191/191\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 435ms/step - accuracy: 0.9438 - loss: 0.1693 - val_accuracy: 0.8293 - val_loss: 0.4967\nEpoch 8/10\n\u001b[1m191/191\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 435ms/step - accuracy: 0.9492 - loss: 0.1512 - val_accuracy: 0.8306 - val_loss: 0.5291\nEpoch 9/10\n\u001b[1m191/191\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 438ms/step - accuracy: 0.9542 - loss: 0.1293 - val_accuracy: 0.8109 - val_loss: 0.6527\nEpoch 10/10\n\u001b[1m191/191\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 435ms/step - accuracy: 0.9632 - loss: 0.1024 - val_accuracy: 0.7912 - val_loss: 0.7738\n","output_type":"stream"}]},{"cell_type":"code","source":"def displayConfusionMatrix(y_true, y_pred, dataset):\n    disp = ConfusionMatrixDisplay.from_predictions(\n        y_true,\n        np.argmax(y_pred, axis=1),\n        display_labels=[\"Not Disaster\",\"Disaster\"],\n        cmap=plt.cm.Blues\n    )\n\n    tn, fp, fn, tp = confusion_matrix(y_true, np.argmax(y_pred, axis=1)).ravel()\n    f1_score = tp / (tp+((fn+fp)/2))\n\n    disp.ax_.set_title(\"Confusion Matrix on \" + dataset + \" Dataset -- F1 Score: \" + str(f1_score.round(2)))","metadata":{"execution":{"iopub.status.busy":"2024-07-23T09:07:06.964580Z","iopub.execute_input":"2024-07-23T09:07:06.964932Z","iopub.status.idle":"2024-07-23T09:07:06.971612Z","shell.execute_reply.started":"2024-07-23T09:07:06.964906Z","shell.execute_reply":"2024-07-23T09:07:06.970691Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"y_pred_train = classifier.predict(X_train)\n\ndisplayConfusionMatrix(y_train, y_pred_train, \"Training\")","metadata":{"execution":{"iopub.status.busy":"2024-07-23T09:07:06.973035Z","iopub.execute_input":"2024-07-23T09:07:06.973432Z","iopub.status.idle":"2024-07-23T09:07:40.103283Z","shell.execute_reply.started":"2024-07-23T09:07:06.973400Z","shell.execute_reply":"2024-07-23T09:07:40.102201Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"\u001b[1m  2/191\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m32s\u001b[0m 174ms/step","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1721725630.946059     150 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m191/191\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m32s\u001b[0m 151ms/step\n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1721725659.559942     149 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"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gI99oYLsQz72ZV9ENMzM9T9G4vMENKxcssA+9uWznGyTiIiIKKc+y3QeERERZQPvztOKQRQRERFpxLvztGMQRURERBrJcjiwvKA/oIFjooiIiIj0wJ4oIiIi0ohDorRjEEVERESaMYrSiuk8IiIiIj2wJ4qIiIg04t152jGIIiIiIo14d552TOcRERER6YE9UURERKQRx5VrxyCKiIiINGMUpRXTeURERER6YE8UERERacS787RjEEVEREQa8e487RhEERERkUYcEqUdx0QRERER6YE9UURERKQZu6K0YhBFREREGnFguXZM5xERERHpgT1RREREpBHvztOOQRQRERFpxCFR2jGdR0RERKQH9kQRERGRZuyK0opBFBEREWnEu/O0YzqPiIiISA/siSIiIiKNeHeedgyiiIiISCMOidKOQRQRERFpxihKK46JIiIiItIDe6KIiIhII96dpx2DKCIiItIshwPLC3gMxXQeERERfRzGjRsHmUymtpQrV07anpSUhKCgIBQtWhRmZmbw9/fHgwcP1PYRHR2NZs2aoXDhwrCxscHQoUPx+vXrPGkve6KIiIhIo/wYV16+fHns2bNHel2o0H+hSnBwMLZu3Yo1a9bAwsICffv2RevWrXH06FEAQFpaGpo1awaVSoVjx44hJiYGXbp0gZGRESZNmpSDM9GMQRQRERFplg9RVKFChaBSqTKtj4+Px++//44VK1agYcOGAIDFixfDzc0Nx48fR82aNbFr1y5cunQJe/bsga2tLSpXrozx48dj+PDhGDduHORyeQ5OJjOm84iIiChPJSQkqC3JyclZlr127Rrs7e3h7OyMTp06ITo6GgBw+vRppKamwtvbWypbrlw5lCxZEuHh4QCA8PBweHh4wNbWVirj6+uLhIQEXLx4MdfPi0EUERERaSTLhX8A4ODgAAsLC2kJCwvTeLwaNWpgyZIl2LFjB+bMmYOoqCjUrVsXz58/R2xsLORyOSwtLdXq2NraIjY2FgAQGxurFkBlbM/YltuYziMiIiKNcuuxL3fu3IFSqZTWKxQKjeWbNGki/b9ixYqoUaMGHB0dsXr1apiYmOjfkDzCnigiIiLKU0qlUm3JKoh6l6WlJVxcXHD9+nWoVCqkpKQgLi5OrcyDBw+kMVQqlSrT3XoZrzWNs8opBlFERESkkSwXlpxITEzEjRs3YGdn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"},"metadata":{}}]},{"cell_type":"code","source":"y_pred_val = classifier.predict(X_val)\n\ndisplayConfusionMatrix(y_val, y_pred_val, \"Validation\")","metadata":{"execution":{"iopub.status.busy":"2024-07-23T09:07:40.104769Z","iopub.execute_input":"2024-07-23T09:07:40.105164Z","iopub.status.idle":"2024-07-23T09:07:49.673053Z","shell.execute_reply.started":"2024-07-23T09:07:40.105127Z","shell.execute_reply":"2024-07-23T09:07:49.671765Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"\u001b[1m48/48\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 168ms/step\n","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1721725669.247348     147 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"#Getting predictions\ny_pred = classifier.predict(X_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-23T09:19:04.082224Z","iopub.execute_input":"2024-07-23T09:19:04.082641Z","iopub.status.idle":"2024-07-23T09:19:38.641674Z","shell.execute_reply.started":"2024-07-23T09:19:04.082609Z","shell.execute_reply":"2024-07-23T09:19:38.640430Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 139ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"y_pred = np.argmax(y_pred, axis = 1)\nprint(y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-07-23T09:19:39.436468Z","iopub.execute_input":"2024-07-23T09:19:39.436892Z","iopub.status.idle":"2024-07-23T09:19:39.444285Z","shell.execute_reply.started":"2024-07-23T09:19:39.436859Z","shell.execute_reply":"2024-07-23T09:19:39.442948Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"[1 1 1 ... 1 1 1]\n","output_type":"stream"}]},{"cell_type":"code","source":"# create submission file\nsample_submission = pd.read_csv(\"/kaggle/input/nlp-getting-started/sample_submission.csv\")\nsample_submission.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-23T09:19:43.859988Z","iopub.execute_input":"2024-07-23T09:19:43.860849Z","iopub.status.idle":"2024-07-23T09:19:43.875733Z","shell.execute_reply.started":"2024-07-23T09:19:43.860812Z","shell.execute_reply":"2024-07-23T09:19:43.874417Z"},"trusted":true},"execution_count":32,"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"   id  target\n0   0       0\n1   2       0\n2   3       0\n3   9       0\n4  11       0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>9</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"sample_submission[\"target\"] = np.argmax(classifier.predict(X_test), axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-07-23T09:22:27.061414Z","iopub.execute_input":"2024-07-23T09:22:27.062037Z","iopub.status.idle":"2024-07-23T09:23:01.458814Z","shell.execute_reply.started":"2024-07-23T09:22:27.061994Z","shell.execute_reply":"2024-07-23T09:23:01.457040Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"\u001b[1m238/238\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m33s\u001b[0m 138ms/step\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[34], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43msample_submission\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mtarget\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39margmax(classifier\u001b[38;5;241m.\u001b[39mpredict(X_test), axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/frame.py:4311\u001b[0m, in \u001b[0;36mDataFrame.__setitem__\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m   4308\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_setitem_array([key], value)\n\u001b[1;32m   4309\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   4310\u001b[0m     \u001b[38;5;66;03m# set column\u001b[39;00m\n\u001b[0;32m-> 4311\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_set_item\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/frame.py:4524\u001b[0m, in \u001b[0;36mDataFrame._set_item\u001b[0;34m(self, key, value)\u001b[0m\n\u001b[1;32m   4514\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_set_item\u001b[39m(\u001b[38;5;28mself\u001b[39m, key, value) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   4515\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   4516\u001b[0m \u001b[38;5;124;03m    Add series to DataFrame in specified column.\u001b[39;00m\n\u001b[1;32m   4517\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4522\u001b[0m \u001b[38;5;124;03m    ensure homogeneity.\u001b[39;00m\n\u001b[1;32m   4523\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m-> 4524\u001b[0m     value, refs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sanitize_column\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4526\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[1;32m   4527\u001b[0m         key \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\n\u001b[1;32m   4528\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m value\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m   4529\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(value\u001b[38;5;241m.\u001b[39mdtype, ExtensionDtype)\n\u001b[1;32m   4530\u001b[0m     ):\n\u001b[1;32m   4531\u001b[0m         \u001b[38;5;66;03m# broadcast across multiple columns if necessary\u001b[39;00m\n\u001b[1;32m   4532\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mis_unique \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns, MultiIndex):\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/frame.py:5266\u001b[0m, in \u001b[0;36mDataFrame._sanitize_column\u001b[0;34m(self, value)\u001b[0m\n\u001b[1;32m   5263\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m _reindex_for_setitem(value, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mindex)\n\u001b[1;32m   5265\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_list_like(value):\n\u001b[0;32m-> 5266\u001b[0m     \u001b[43mcom\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrequire_length_match\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   5267\u001b[0m arr \u001b[38;5;241m=\u001b[39m sanitize_array(value, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mindex, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m, allow_2d\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m   5268\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[1;32m   5269\u001b[0m     \u001b[38;5;28misinstance\u001b[39m(value, Index)\n\u001b[1;32m   5270\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m value\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   5273\u001b[0m     \u001b[38;5;66;03m# TODO: Remove kludge in sanitize_array for string mode when enforcing\u001b[39;00m\n\u001b[1;32m   5274\u001b[0m     \u001b[38;5;66;03m# this deprecation\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/common.py:573\u001b[0m, in \u001b[0;36mrequire_length_match\u001b[0;34m(data, index)\u001b[0m\n\u001b[1;32m    569\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    570\u001b[0m \u001b[38;5;124;03mCheck the length of data matches the length of the index.\u001b[39;00m\n\u001b[1;32m    571\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    572\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(data) \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(index):\n\u001b[0;32m--> 573\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    574\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLength of values \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    575\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m(\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(data)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m) \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    576\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdoes not match length of index \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    577\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m(\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(index)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m)\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    578\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: Length of values (7613) does not match length of index (3263)"],"ename":"ValueError","evalue":"Length of values (7613) does not match length of index (3263)","output_type":"error"}]},{"cell_type":"code","source":"\nsample_submission.to_csv(\"submission.csv\", index=False)","metadata":{},"execution_count":null,"outputs":[]}]}